// Generated by CoffeeScript 1.3.3
(function() {
  var WieldyMarkup, _,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  _ = require('underscore');

  _.str = require('underscore.string');

  WieldyMarkup = (function() {

    WieldyMarkup.whitespace = " \t";

    WieldyMarkup.remove_grouped_text = function(text, z) {
      var grouper_index, output, status;
      output = "";
      status = true;
      while (text_copy !== '') {
        grouper_index = text.indexOf(z);
        if (grouper_index === -1) {
          if (status) {
            output += text;
          }
          text = '';
        } else {
          if (status) {
            output += text.substring(0, grouper_index);
          }
          if (text.length > grouper_index + 2) {
            text = text.substring(grouper_index + 1, text.length);
          } else {
            text = '';
          }
        }
        status = !status;
      }
      return output;
    };

    WieldyMarkup.get_selector_from_line = function(line) {
      var ch, first_whitespace_index, i, _i, _len, _ref;
      first_whitespace_index = null;
      _ref = line.split("");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        ch = _ref[i];
        if (WieldyMarkup.whitespace.indexOf(ch) > -1) {
          first_whitespace_index = i;
          break;
        }
      }
      if (first_whitespace_index === null) {
        return line;
      } else {
        return line.substring(0, first_whitespace_index);
      }
    };

    WieldyMarkup.get_tag_nest_level = function(text, open_string, close_string) {
      var close_string_first, close_string_index, nest_level, open_string_first, open_string_index;
      if (open_string == null) {
        open_string = '<';
      }
      if (close_string == null) {
        close_string = '>';
      }
      nest_level = 0;
      while (true) {
        open_string_index = text.indexOf(open_string) > -1 ? text.indexOf(open_string) : null;
        close_string_index = text.indexOf(close_string) > -1 ? text.indexOf(close_string) : null;
        open_string_first = false;
        close_string_first = false;
        if (open_string_index === close_string_index) {
          break;
        } else if (open_string_index !== null) {
          open_string_first = true;
        } else if (close_string_index !== null) {
          close_string_first = true;
        } else {
          if (open_string_index < close_string_index) {
            open_string_first = true;
          } else {
            close_string_first = true;
          }
        }
        if (open_string_first) {
          nest_level++;
          if (text.length === open_string_index + open_string.length) {
            break;
          } else {
            text = text.substring(open_string_index + open_string.length, text.length);
          }
        } else if (close_string_first) {
          nest_level--;
          if (text.length === close_string_index + close_string.length) {
            break;
          } else {
            text = text.substring(close_string_index + close_string.length, text.length);
          }
        }
      }
      return nest_level;
    };

    WieldyMarkup.get_leading_whitespace_from_text = function(text) {
      var ch, i, leading_whitespace, _i, _len, _ref;
      leading_whitespace = "";
      _ref = text.split("");
      for (i = _i = 0, _len = _ref.length; _i < _len; i = ++_i) {
        ch = _ref[i];
        if (WieldyMarkup.whitespace.indexOf(ch) === -1) {
          leading_whitespace = text.substring(0, i);
          break;
        }
      }
      return leading_whitespace;
    };

    function WieldyMarkup(text, compress) {
      if (text == null) {
        text = "";
      }
      if (compress == null) {
        compress = false;
      }
      this.add_html_to_output = __bind(this.add_html_to_output, this);

      this.process_attributes = __bind(this.process_attributes, this);

      this.process_selector = __bind(this.process_selector, this);

      this.process_embedded_line = __bind(this.process_embedded_line, this);

      this.process_next_line = __bind(this.process_next_line, this);

      this.close_tag = __bind(this.close_tag, this);

      this.close_lower_level_tags = __bind(this.close_lower_level_tags, this);

      this.process_current_level = __bind(this.process_current_level, this);

      this.compile = __bind(this.compile, this);

      this.text = text;
      this.compress = compress;
      if (this.text !== "") {
        this.compile();
      }
    }

    WieldyMarkup.prototype.compile = function(text, compress) {
      if (text == null) {
        text = null;
      }
      if (compress == null) {
        compress = null;
      }
      if (text !== null) {
        this.text = text;
      }
      if (compress !== null) {
        this.compress = !!compress;
      }
      this.output = "";
      this.open_tags = [];
      this.indent_token = "";
      this.current_level = 0;
      this.previous_level = null;
      this.line_number = 0;
      this.embedding_token = '`';
      while (this.text !== "") {
        this.process_current_level().close_lower_level_tags().process_next_line();
      }
      while (this.open_tags.length > 0) {
        this.close_tag();
      }
      return this;
    };

    WieldyMarkup.prototype.process_current_level = function() {
      var i, leading_whitespace;
      this.previous_level = this.current_level;
      leading_whitespace = this.prototype.get_leading_whitespace_from_text(this.text);
      if (leading_whitespace === "") {
        this.current_level = 0;
      } else if (this.indent_token === "") {
        this.indent_token = leading_whitespace;
        this.current_level = 1;
      } else {
        i = 0;
        while (_.str.startsWith(leading_whitespace, this.indent_token)) {
          leading_whitespace = leading_whitespace.substring(this.indent_token.length, leading_whitespace.length);
          i += 1;
        }
        this.current_level = i;
      }
      return this;
    };

    WieldyMarkup.prototype.close_lower_level_tags = function() {
      if (this.current_level <= this.previous_level) {
        while (this.open_tags.length > 0 && this.open_tags[this.open_tags.length - 1][0] >= this.current_level) {
          this.close_tag();
        }
      }
      return this;
    };

    WieldyMarkup.prototype.close_tag = function() {
      var closing_tag_tuple;
      closing_tag_tuple = this.open_tags.pop();
      if (!this.compress) {
        output += _.str.repeat(this.indent_token, closing_tag_tuple[0]);
      }
      this.output += "</" + closing_tag_tuple[1] + ">";
      if (!this.compress) {
        this.output += "\n";
      }
      return this;
    };

    WieldyMarkup.prototype.process_next_line = function() {
      var line, line_break_index, line_split_list, lines, rest_of_line, selector;
      this.line_starts_with_tick = false;
      this.self_closing = false;
      this.inner_text = null;
      line = "";
      if (this.text.indexOf("\n") > -1) {
        line_break_index = this.text.indexOf("\n");
        line = _.str.trim(this.text.substring(0, line_break_index));
        this.text = this.text.substring(line_break_index + 1, this.text.length);
      } else {
        line = _.str.trim(this.text);
        this.text = "";
      }
      this.line_number += 1;
      if (line.length === 0) {
        return this;
      }
      if (line[0] === this.embedding_token) {
        this.process_embedded_line(line);
      } else {
        while (true) {
          line_split_list = line.split('\\-\\');
          lines = [line_split_list[0]];
          if (line_split_list.length === 1) {
            line = _.str.trim(line_split_list[0]);
            break;
          } else {
            lines.push(_.str.join('\\-\\', line_split_list.substring(1, line_split_list.length)));
          }
          lines[0] = _.str.trim(lines[0]);
          selector = this.prototype.get_selector_from_line(lines[0]);
          this.process_selector(selector);
          rest_of_line = _.str.trim(lines[0].substring(selector.length, lines[0].length));
          rest_of_line = this.process_attributes(rest_of_line);
          this.add_html_to_output();
          this.tag = null;
          this.tag_id = null;
          this.tag_classes = [];
          this.tag_attributes = [];
          this.previous_level = this.current_level;
          this.current_level++;
          line = _.str.join('\\-\\', lines.substring(1, lines.length));
        }
        selector = this.prototype.get_selector_from_line(line);
        this.process_selector(selector);
        rest_of_line = _.str.trim(line.substring(selector.length, line.length));
        rest_of_line = this.process_attributes(rest_of_line);
        if (_.str.startsWith(rest_of_line, '<')) {
          this.inner_text = rest_of_line;
          if (this.prototype.get_tag_nest_level(this.inner_text) < 0) {
            throw "Too many '>' found on line " + this.line_number;
          }
          while (this.prototype.get_tag_nest_level(this.inner_text) > 0) {
            if (this.text === "") {
              throw "Unmatched '<' found on line " + this.line_number;
            } else if (__indexOf.call(this.text, "\n") >= 0) {
              line_break_index = this.text.indexOf("\n");
              this.inner_text += ' ' + _.str.trim(this.text.substring(0, line_break_index));
              if (this.text.length === line_break_index + 1) {
                this.text = "";
              } else {
                this.text = this.text.substring(line_break_index + 1, this.text.length);
              }
            } else {
              this.inner_text += this.text;
              this.text = "";
            }
          }
          this.inner_text = _.str.trim(this.inner_text).substring(1, this.inner_text.length - 1);
        } else if (_.str.startsWith(rest_of_line, '/')) {
          if (rest_of_line.length > 0 && rest_of_line[rest_of_line.length - 1] === '/') {
            this.self_closing = true;
          }
        }
        this.add_html_to_output();
      }
      return this;
    };

    WieldyMarkup.prototype.process_embedded_line = function(line) {
      this.line_starts_with_tick = true;
      if (!this.compress) {
        this.output += _.str.repeat(this.indent_token, this.current_level);
      }
      this.output += line.substring(1, line.length);
      if (!this.compress) {
        this.output += "\n";
      }
      return this;
    };

    WieldyMarkup.prototype.process_selector = function(selector) {
      var ch, delimiter_index, i, next_delimiter_index, _i, _j, _len, _len1, _ref, _ref1;
      if (selector.length > 0 && ((_ref = selector[0]) === '#' || _ref === '.')) {
        this.tag = 'div';
      } else {
        delimiter_index = null;
        _ref1 = selector.split("");
        for (i = _i = 0, _len = _ref1.length; _i < _len; i = ++_i) {
          ch = _ref1[i];
          if (ch === '#' || ch === '.') {
            delimiter_index = i;
            break;
          }
        }
        if (delimiter_index === null) {
          this.tag = selector;
          selector = "";
        } else {
          this.tag = selector.substring(0, delimiter_index);
          selector = selector.substring(this.tag.length, selector.length);
        }
      }
      this.tag_id = null;
      this.tag_classes = [];
      while (true) {
        next_delimiter_index = null;
        if (selector === "") {
          break;
        } else {
          for (i = _j = 0, _len1 = selector.length; _j < _len1; i = ++_j) {
            ch = selector[i];
            if (i > 0 && (ch === '#' || ch === '.')) {
              next_delimiter_index = i;
              break;
            }
          }
          if (next_delimiter_index === null) {
            if (selector[0] === '#') {
              this.tag_id = selector.substring(1, selector.length);
            } else if (selector[0] === ".") {
              this.tag_classes.push(selector.substring(1, selector.length));
            }
            selector = "";
          } else {
            if (selector[0] === '#') {
              this.tag_id = selector.substring(1, next_delimiter_index);
            } else if (selector[0] === ".") {
              this.tag_classes.push(selector.substring(1, next_delimiter_index));
            }
            selector = selector.substring(next_delimiter_index, selector.length);
          }
        }
      }
      return this;
    };

    WieldyMarkup.prototype.process_attributes = function(rest_of_line) {
      var ch, close_index, current_attribute, embedded_attribute, equals_index, first_equals_index, i, reversed_letters_between_equals, second_equals_index, whitespace_index, _i, _len;
      this.tag_attributes = [];
      while (rest_of_line !== "") {
        if (__indexOf.call(rest_of_line, '=') < 0) {
          break;
        } else if (__indexOf.call(rest_of_line, '=') >= 0 && __indexOf.call(rest_of_line, '<') >= 0 && rest_of_line.indexOf('<') < rest_of_line.indexOf('=')) {
          break;
        }
        first_equals_index = rest_of_line.indexOf('=');
        embedded_attribute = false;
        if (rest_of_line.substr(first_equals_index + 1, 2) === '{{') {
          embedded_attribute = true;
          close_index = rest_of_line.indexOf('}}');
          if (close_index === -1) {
            throw "Unmatched '{{' found in line " + this.line_number;
          }
        } else if (rest_of_line.substr(first_equals_index + 1, 2) === '<%') {
          embedded_attribute = true;
          close_index = rest_of_line.indexOf('%>');
          if (close_index === -1) {
            throw "Unmatched '<%' found in line " + this.line_number;
          }
        }
        if (embedded_attribute) {
          current_attribute = rest_of_line.substring(0, close_index + 2);
          if (rest_of_line.length === close_index + 2) {
            rest_of_line = "";
          } else {
            rest_of_line = rest_of_line.substr(close_index + 2);
          }
        } else if (rest_of_line.length === first_equals_index + 1) {
          current_attribute = _.str.trim(rest_of_line);
          rest_of_line = "";
        } else if (__indexOf.call(rest_of_line.substr(first_equals_index + 1), '=') < 0) {
          if (__indexOf.call(rest_of_line, '<') >= 0) {
            current_attribute = _.str.trim(rest_of_line.substring(0, rest_of_line.indexOf('<')));
            rest_of_line = rest_of_line.substr(rest_of_line.indexOf('<'));
          } else {
            current_attribute = rest_of_line;
            rest_of_line = "";
          }
        } else {
          second_equals_index = rest_of_line.substr(first_equals_index + 1).indexOf('=');
          reversed_letters_between_equals = _.str.reverse(rest_of_line.substring(first_equals_index + 1, first_equals_index + 1 + second_equals_index));
          whitespace_index = null;
          for (i = _i = 0, _len = reversed_letters_between_equals.length; _i < _len; i = ++_i) {
            ch = reversed_letters_between_equals[i];
            if (" \t".indexOf(ch) > -1) {
              whitespace_index = first_equals_index + 1 + second_equals_index - i;
              break;
            }
          }
          if (whitespace_index === null) {
            break;
          }
          current_attribute = _.str.trim(rest_of_line.substring(0, whitespace_index));
          rest_of_line = rest_of_line.substr(whitespace_index);
        }
        if (current_attribute !== null) {
          equals_index = current_attribute.indexOf('=');
          this.tag_attributes.push((" " + (current_attribute.substring(0, equals_index)) + "=") + ("" + ('"' + current_attribute.substr(equals_index + 1) + '"')));
        }
      }
      return _.str.trim(rest_of_line);
    };

    WieldyMarkup.prototype.add_html_to_output = function() {
      var tag_html;
      if (!this.line_starts_with_tick) {
        tag_html = "<" + this.tag;
        if (this.tag_id !== null) {
          tag_html += ' id="' + this.tag_id + '"';
        }
        if (this.tag_classes.length > 0) {
          tag_html += ' class="' + this.tag_classes.join(' ') + '"';
        }
        if (this.tag_attributes.length > 0) {
          tag_html += this.tag_attributes.join('');
        }
        if (this.self_closing) {
          tag_html += ' />';
          if (!this.compress) {
            this.output += _.str.repeat(this.indent_token, this.current_level);
          }
          this.output += tag_html;
          if (!this.compress) {
            this.output += "\n";
          }
        } else {
          tag_html += '>';
          if (this.inner_text !== null) {
            tag_html += this.inner_text;
          }
          if (!this.compress) {
            this.output += _.str.repeat(this.indent_token, this.current_level);
          }
          this.output += tag_html;
          if (this.inner_text === null) {
            if (!this.compress) {
              this.output += "\n";
            }
            this.open_tags.push([this.current_level, this.tag]);
          } else {
            this.output += "</" + this.tag + ">";
            if (!this.compress) {
              this.output += "\n";
            }
          }
        }
      }
      return this;
    };

    return WieldyMarkup;

  }).call(this);

  exports.wieldymarkup = WieldyMarkup;

}).call(this);
