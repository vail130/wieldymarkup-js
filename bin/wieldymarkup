#!/usr/bin/env node

var Compiler = require('../lib/wieldymarkup').Compiler;
var _ = require('underscore');
var findit = require('findit');
var fs = require('fs');

var Commander = function(args) {
  
  var makeDirsForPath = function(path, verbose) {
    var pathSections = path.split('/');
    pathSections.pop();
    if(pathSections[0] == '') {
      pathSections.shift();
    }
    var tempPath, stats;
    for(var i = 0; pathSections[i]; i++) {
      tempPath = '/' + pathSections.slice(0, i+1).join('/');
      if(!fs.existsSync(tempPath)) {
        if(verbose) {
          console.log("Creating directory " + tempPath);
        }
        fs.mkdirSync(tempPath);
      }
    }
  }
  
  var self = this;
  
  this.init = function(args) {
    this.args = args;
    
    this.verbose = false;
    if(this.args.indexOf("-v") > -1 || this.args.indexOf("--verbose") > -1) {
      this.verbose = true;
      this.args = _.reject(this.args, function(arg) {
        return ["-v", "--verbose"].indexOf(arg) > -1;
      });
    }
    
    this.compress = false;
    if(this.args.indexOf("-c") > -1 || this.args.indexOf("--compress") > -1) {
      this.compress = true;
      if(this.verbose) {
        console.log("Compression activated.");
      }
      this.args = _.reject(this.args, function(arg) {
        return ["-c", "--compress"].indexOf(arg) > -1;
      });
    }
    
    this.recursive = false;
    if(this.args.indexOf("-r") > -1 || this.args.indexOf("--recursive") > -1) {
      this.recursive = true;
      if(this.verbose) {
        console.log("Recursive activated.");
      }
      this.args = _.reject(this.args, function(arg) {
        return ["-r", "--recursive"].indexOf(arg) > -1;
      });
    }
    
    return (
      this.args.indexOf("-d") > -1
        ? this.processDirectory()
        : this.processFile()
    );
  };
  
  this.processFile = function() {
    if(this.verbose) {
      console.log("Processing as file.");
    }
    
    this.strict = true;
    if(this.args.indexOf("-f") > -1 || this.args.indexOf("--force") > -1) {
      this.strict = false;
      if(this.verbose) {
        console.log("Strict suppressed.");
      }
      this.args = _.reject(
        this.args,
        function(arg) {
          ["-f", "--force"].indexOf(arg) > -1;
        }
      );
    }
    
    _.each(this.args, function (filepath) {
      self.compileFromPath(filepath);
    });
    
    return this;
  };
  
  this.processDirectory = function() {
    if(this.verbose) {
      console.log("Processing as directory.");
    }
    
    this.strict = false;
    if(this.args.indexOf("-f") > -1 || this.args.indexOf("--force") > -1) {
      this.args = _.reject(
        this.args,
        function(arg) {
          ["-f", "--force"].indexOf(arg) > -1;
        }
      );
    }
    
    var dIndex = args.indexOf("-d");
    if(this.args.length < dIndex + 1) {
      return console.log("The -d argument must be followed immediately by a " +
                         "directory path in which to compiler .wml files.");
    }
    
    var dirPath = process.cwd().toString() + '/' + this.args[dIndex + 1];
    if(typeof dirPath !== 'string') {
      return console.log("Invalid directory path; it must be a string.");
    }
    if(dirPath[dirPath.length - 1] !== '/') {
      dirPath += '/';
    }
    if(!fs.existsSync(dirPath)) {
      return console.log("Invalid directory path following -d argument.");
    }
    if(!fs.statSync(dirPath).isDirectory()) {
      return console.log("Invalid directory path following -d argument.");
    }
    if(this.verbose) {
      console.log("Source directory detected.");
    }
    
    var newDirPath = dirPath;
    if(this.args[dIndex + 2]) {
      newDirPath = process.cwd().toString() + '/' + this.args[dIndex + 2];
      if(typeof newDirPath !== 'string') {
        return console.log("Invalid destination directory path; " +
                           "it must be a string.");
      }
      if(newDirPath[newDirPath.length - 1] !== '/') {
        newDirPath += '/';
      }
      if(this.verbose) {
        console.log("Destination directory detected.");
      }
    }
    
    if(this.recursive) {
      findit(dirPath).on('file', function (file) {
        self.compileFromPath(file, {
          source: dirPath,
          destination: newDirPath
        });
      });
    } else {
      fs.readdir(process.cwd(), function (err, files) {
        if (err) {
          return console.log(err);
        }
        _.each(files, function(file) {
          self.compileFromPath(file, {
            source: dirPath,
            destination: newDirPath
          });
        });
      });
    }
    
    return this;
  };
  
  this.compileFromPath = function(filepath, options) {
    if(typeof options !== 'object' || typeof options.hasOwnProperty === 'undefined') {
      options = {};
    }
    options.source = options.hasOwnProperty('source') ? options.source : null;
    options.destination = options.hasOwnProperty('destination') ? options.destination : null;
    
    var filepathSections = filepath.replace(/(?:\\)|(?:\/\/)/g, '/').split('/');
    var filenameSections = filepathSections[filepathSections.length - 1].split('.');
    var filename = filenameSections.slice(0, filenameSections.length - 1).join('.');
    var ext = filenameSections[filenameSections.length - 1];
    if(ext !== 'wml') {
      if(this.strict) {
        return console.log("Invalid extension for (" + filepath + "). Must be .wml.");
      } else {
        return;
      }
    }
    
    fs.readFile(filepathSections.join('/'), 'utf8', function(err, data) {
      if (err) { return console.log(err); }
      
      var html = new Compiler(data, self.compress).output;
      var temp = filepath.split('/');
      temp.pop();
      tempNewFilepath = temp.join('/') + '/' + filename + '.html';
      
      if(options.source !== null && options.destination !== null) {
        newFilepath = options.destination + tempNewFilepath.substring(options.source.length + 1);
        makeDirsForPath(newFilepath, self.verbose);
      } else {
        newFilepath = tempNewFilepath;
      }
      
      if(self.verbose) {
        console.log("Compiling " + newFilepath);
      }
      fs.writeFile(newFilepath, html);
    });
    
    return this;
  };
  
  this.init(args);
}

new Commander(process.argv.slice(2));
