#!/usr/bin/env node

var Compiler = require('../lib/wieldyjs').Compiler
  , _ = require('underscore')
  , findit = require('findit')
  , fs = require('fs')
  , path = require('path')
  , existsSync = (typeof fs.existsSync === 'function'
      ? fs.existsSync
      : path.existsSync);

var Commander = function(args) {
  
  var self = this;
  this.args = args || [];
  
  this.init = function(args) {
    if(args) {
      this.args = args;
    }
    this.verbose = false;
    this.compress = false;
    this.recursive = false;
    this.help = false
    this.mirror = false;
    
    if(this.args.indexOf("-h") + this.args.indexOf("--help") > -2) {
      this.help = true;
    }
    
    if(this.args.indexOf("-v") + this.args.indexOf("--verbose") > -2) {
      this.verbose = true;
    }
    if(this.args.indexOf("-c") + this.args.indexOf("--compress") > -2) {
      this.compress = true;
      if(this.verbose) {
        console.log("Compression mode detected.");
      }
    }
    if(this.args.indexOf("-r") + this.args.indexOf("--recursive") > -2) {
      this.recursive = true;
      if(this.verbose) {
        console.log("Recursive mode detected.");
      }
    }
    if(this.args.indexOf("-m") + this.args.indexOf("--mirror") > -2) {
      this.mirror = true;
      if(this.verbose) {
        console.log("Mirrored mode detected.");
      }
    }
    
    this.args = _.reject(
      this.args,
      function(arg) {
        return arg[0] === '-';
      }
    );
    
    if(this.help || this.args.length === 0) {
      this.showHelp();
    } else if(this.mirror) {
      if(this.args.length !== 2) {
        return console.log([
          "There must be exactly two path arguments for mirrored mode. ",
          "Exiting."
          ].join(""));
      } else {
        this.processMirroredFileTree();
      }
    } else {
      this.processPathList();
    }
  };
  
  this.showHelp = function() {
    console.log([
      "",
      "WieldyJS: WieldyMarkup Compiler for Node",
      "",
      "Usage:",
      "  wieldyjs [options]* [" +
          "(file | dir)* | ((-m | --mirror) in-dir out-dir)" +
          "]",
      "",
      "Usage Syntax:",
      "  `[` and `]` denote optional groups",
      "  `(` and `)` denote semantic groups",
      "  `*` denotes 0 or more of the preceeding entity",
      "  `|` denotes OR relationship between preceeding and proceeding " +
          "entities",
      "",
      "Global Options:",
      "  -h OR --help         Show this help message.",
      "  -v OR --verbose      Display messages describing compiler behavior.",
      "  -c OR --compress     Output HTML files without whitespace between " +
                              "tags.",
      "  -r OR --recursive    Search recursively inside directories for " +
                              ".wml files.",
      "  -m OR --mirror       Mirror directory tree inside of in-dir into " +
                              "out-dir (paths may be relative or absolute)",
      "",
      "Examples:",
      "  wieldyjs -c -r -m src/ dest/",
      "  wieldyjs -r /Users/user/Projects/project/templates/",
      "  wieldyjs templates/file1.wml templates/file2.wml templates/dir1",
      ""
    ].join("\n  "));
  };
  
  this.processPathList = function() {
    if(this.verbose) {
      console.log("Processing as path list.");
    }
    
    _.each(this.args, function(arg) {
      if(!existsSync(arg)) {
        if(this.verbose) {
          console.log("Path does not exist: " + arg);
        }
        return;
      }
      if(fs.statSync(arg).isDirectory()) {
        if(self.recursive) {
          findit(arg).on('file', function (file) {
            if(path.extname(file) !== '.wml') {
              return;
            }
            self.compileFromPath(
              file, self.constructor.getOutputFile(arg, arg, file)
            );
          });
        } else {
          _.each(fs.readdirSync(arg), function(file) {
            if(path.extname(file) !== '.wml') {
              return;
            }
            self.compileFromPath(
              file, self.constructor.getOutputFile(arg, arg, file)
            );
          });
        }
      } else {
        if(path.extname(arg) !== '.wml') {
          return;
        }
        self.compileFromPath(arg, arg.substr(0, arg.length - 4) + '.html');
      }
    });
  };
  
  this.processMirroredFileTree = function() {
    if(this.verbose) {
      console.log("Processing as mirrored file tree.");
    }
    
    var inputDir = path.normalize(this.args[0])
      , outputDir = path.normalize(this.args[1])
      , cwd = process.cwd();
    
    if(inputDir[0] !== '/' && inputDir.search(/^[a-zA-Z]:[\\\/]/) === 0) {
      inputDir = path.join(cwd, inputDir);
    }
    if(!existsSync(inputDir)) {
      return console.log("Input directory does not exist. Exiting.");
    }
    if(!fs.statSync(inputDir).isDirectory()) {
      return console.log("Input directory is not a directory. Exiting.");
    }
    if(this.verbose) {
      console.log("Input directory confirmed.");
    }
    
    if(outputDir[0] !== '/' && outputDir.search(/^[a-zA-Z]:[\\\/]/) === 0) {
      outputDir = path.join(cwd, outputDir);
    }
    if(this.verbose) {
      console.log("Output directory confirmed.");
    }
    
    if(this.recursive) {
      findit(inputDir).on('file', function (file) {
        if(path.extname(file) !== '.wml') {
          return;
        }
        self.compileFromPath(
          file, self.constructor.getOutputFile(inputDir, outputDir, file)
        );
      });
    
    } else {
      _.each(fs.readdirSync(inputDir), function(file) {
        if(path.extname(file) !== '.wml') {
          return;
        }
        self.compileFromPath(
          file, self.constructor.getOutputFile(inputDir, outputDir, file)
        );
      });
    }
  };
  
  this.compileFromPath = function(file, output) {
    var data = fs.readFileSync(file, 'utf8')
      , html = new Compiler(data, self.compress).output
      , dirArray = self.constructor.getDirsForPath(output, self.verbose)
      ;
    
    self.constructor.makeDirsInArray(dirArray);
    if(self.verbose) {
      console.log("Compiling " + output);
    }
    fs.writeFile(output, html);
  };
  
  this.init();
}

Commander.getOutputFile = function(inputDir, outputDir, inputFile) {
  inputFile = path.normalize(inputFile);
  var subTreeSections = inputFile.split('/').slice((inputDir).split('/').length);
  subTreeSections.pop();
  var subTree = path.join(subTreeSections)
    , fileBaseName = path.basename(inputFile, '.wml');
  return path.join(outputDir, subTree, fileBaseName + '.html');
};
  
Commander.getDirsForPath = function(filePath, verbose) {
  var pathSections = filePath.split('/');
  pathSections.pop();
  if(pathSections[0] == '') {
    pathSections.shift();
  }
  var dirArray = [];
  for(var i = 0; pathSections[i]; i++) {
    dirArray.push('/' + pathSections.slice(0, i+1).join('/'));
  }
  return dirArray;
};

Commander.makeDirsInArray = function(dirArray) {
  var dirExists = true;
  for(var i = 0; dirArray[i]; i++) {
    if(dirExists && !existsSync(dirArray[i])) {
      dirExists = false;
    }
    if(!dirExists) {
      if(verbose) {
        console.log("Creating directory " + dirArray[i]);
      }
      fs.mkdirSync(dirArray[i]);
    }
  }
}

if(require.main === module) {
  new Commander(process.argv.slice(2));
} else {
  var exports = module.exports = {
    Commander: Commander
  };
}
